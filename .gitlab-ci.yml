image: php:8.2.3-fpm-alpine

stages:
    - composer-packages
    - lint
    - test-unit
    - build
    - test-functional
    - deploy

variables:
    APP_NAME: colibri

    CI_PHP_REGISTRY: $CI_REGISTRY_IMAGE/php
    CI_NGINX_REGISTRY: $CI_REGISTRY_IMAGE/nginx
    CI_NODE_REGISTRY: $CI_REGISTRY_IMAGE/node

    CI_APP_TAG: $CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID

    NGINX_VERSION: 1.23.3
    PHP_VERSION: 8.2.3
    APCU_VERSION: 5.1.22
    NODE_VERSION: 18.16.0

    K8S_NAMESPACE_STAGING: $APP_NAME-staging
    K8S_NAMESPACE_PRODUCTION: $APP_NAME-production

    K8S_NAMESPACE: $K8S_NAMESPACE_STAGING

    MYSQL_ROOT_PASSWORD: S3cr3tP4ssw0rd
    MYSQL_DATABASE: $APP_NAME

.prepare_k8s:
    script: &prepare_k8s
        - apk update  && apk add --no-cache curl
        - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        - chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl
        - mkdir -p $HOME/.kube

.configure_k8s:
    script: &configure_k8s
        - *prepare_k8s
        - kubectl config set-cluster ${K8S_CLUSTER_NAME} --server=${K8S_CLUSTER_SERVER}
        - kubectl config set-context ${K8S_CONTEXT_NAME} --cluster=${K8S_CLUSTER_NAME} --user=${K8S_USER_NAME}
        - kubectl config set-credentials ${K8S_USER_NAME} --token=${K8S_USER_TOKEN}
        - kubectl config use-context ${K8S_CONTEXT_NAME}

.deploy:
    script: &deploy
        - kubectl set image deploy/api -n $K8S_NAMESPACE php=$CI_PHP_REGISTRY:$CI_APP_TAG nginx=$CI_NGINX_REGISTRY:$CI_APP_TAG

.install_production_dependencies:
    script: &install_production_dependencies
        - cd api
        - curl --show-error --silent "https://getcomposer.org/installer" | php
        - php composer.phar install --prefer-dist --no-dev --no-autoloader --no-scripts --no-progress
        - php composer.phar clear-cache
        - php composer.phar dumpautoload

.install_development_dependencies:
    script: &install_development_dependencies
        - *install_production_dependencies
        - apk add yamllint
        - php composer.phar install --prefer-dist --no-autoloader --no-scripts --no-progress
        - php composer.phar clear-cache
        - php composer.phar dumpautoload

.build_images:
    script: &build_images
        - docker build --pull -t $CI_PHP_REGISTRY:$CI_APP_TAG -f docker/php/Dockerfile . --build-arg PHP_VERSION=$PHP_VERSION --build-arg APCU_VERSION=$APCU_VERSION --target=production
        - docker push $CI_PHP_REGISTRY:$CI_APP_TAG
        - docker build --pull -t $CI_NGINX_REGISTRY:$CI_APP_TAG -f docker/nginx/Dockerfile . --build-arg NGINX_VERSION=$NGINX_VERSION --target=production
        - docker push $CI_NGINX_REGISTRY:$CI_APP_TAG
        - docker build --pull -t $CI_NODE_REGISTRY:$CI_APP_TAG -f docker/node/Dockerfile . --build-arg NODE_VERSION=$NODE_VERSION --target=production
        - docker push $CI_NODE_REGISTRY:$CI_APP_TAG

lint:
    stage: lint
    except:
        variables:
            - $CI_COMMIT_MESSAGE =~ /.*skip-lint.*/
    before_script:
        - *install_development_dependencies
    script:
        - vendor/bin/phpstan --ansi --memory-limit=2G
        - vendor/bin/ecs --ansi
        - yamllint .
        - bin/console lint:yaml config src
        - bin/console lint:container

test-unit:
    stage: test-unit
    except:
        variables:
            - $CI_COMMIT_MESSAGE =~ /.*skip-tests.*/
    before_script:
        - *install_development_dependencies
    script: vendor/bin/phpunit --testsuite=unit

build:
    stage: build
    image: docker:23.0.1
    dependencies:
        - lint
    before_script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    script: *build_images

test-functional:
    stage: test-functional
    image: $CI_PHP_REGISTRY:$CI_APP_TAG
    except:
        variables:
            - $CI_COMMIT_MESSAGE =~ /.*skip-tests.*/
    dependencies:
        - build
    variables:
        MYSQL_DATABASE: ${MYSQL_DATABASE}
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    services:
        -   name: mysql:8.0
            alias: mysql
    before_script:
        - *install_development_dependencies
    script:
        - cp .env.test .env
        - export DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
        - vendor/bin/phpunit --testsuite=all

deploy:staging:manual:
    stage: deploy
    image: alpine:3.16
    when: manual
    dependencies:
        - test-functional
    variables:
        K8S_NAMESPACE: $K8S_NAMESPACE_STAGING
    before_script: *configure_k8s
    script: *deploy

deploy:staging:auto:
    stage: deploy
    image: alpine:3.16
    only:
        - main
    dependencies:
        - test-functional
    variables:
        K8S_NAMESPACE: $K8S_NAMESPACE_STAGING
    before_script: *configure_k8s
    script: *deploy

deploy:production:manual:
    stage: deploy
    image: alpine:3.16
    when: manual
    only:
        - main
    dependencies:
        - build
    variables:
        K8S_NAMESPACE: $K8S_NAMESPACE_PRODUCTION
    before_script: *configure_k8s
    script: *deploy
